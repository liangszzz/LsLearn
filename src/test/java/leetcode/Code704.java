package leetcode;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class Code704 {

    @Test
    public void test() {
        Assertions.assertEquals(4, search(new int[]{-1, 0, 3, 5, 9, 12}, 9));
    }

    @Test
    public void test1() {
        Assertions.assertEquals(-1, search(new int[]{-1, 0, 3, 5, 9, 12}, 2));
    }

    @Test
    public void test2() {
        Assertions.assertEquals(0, search(new int[]{5}, 5));
    }

    @Test
    public void test3() {
        Assertions.assertEquals(1, search(new int[]{2, 5}, 5));
    }

    @Test
    public void test4() {
        Assertions.assertEquals(-1, search(new int[]{5}, -5));
    }

    @Test
    public void test5() {
        Assertions.assertEquals(0, search(new int[]{2, 5}, 2));
    }

    @Test
    public void test6() {
        Assertions.assertEquals(608, search(new int[]{-996, -995, -991, -990, -989, -988, -987, -983, -980, -979, -977, -976, -975, -974, -973, -972, -971, -968, -965, -964, -962, -961, -960, -959, -957, -956, -955, -954, -950, -949, -948, -944, -943, -941, -940, -939, -938, -937, -935, -933, -932, -931, -930, -929, -923, -916, -912, -911, -910, -909, -908, -904, -901, -900, -899, -897, -896, -891, -887, -886, -885, -884, -881, -880, -877, -875, -872, -871, -870, -869, -866, -860, -856, -851, -850, -847, -846, -844, -842, -840, -835, -834, -833, -832, -830, -829, -828, -827, -825, -824, -823, -822, -821, -819, -816, -815, -812, -811, -810, -807, -806, -805, -804, -803, -799, -798, -796, -794, -793, -788, -786, -785, -783, -782, -777, -774, -772, -767, -766, -763, -758, -754, -753, -751, -750, -749, -743, -742, -740, -739, -737, -734, -733, -732, -730, -727, -725, -724, -722, -721, -719, -716, -713, -712, -710, -707, -706, -701, -699, -698, -697, -694, -693, -692, -690, -688, -687, -684, -683, -682, -674, -671, -668, -666, -665, -664, -661, -659, -658, -656, -655, -654, -653, -652, -651, -649, -648, -647, -644, -643, -642, -641, -640, -639, -637, -636, -635, -634, -633, -631, -626, -625, -624, -623, -620, -619, -613, -610, -609, -607, -603, -600, -599, -597, -589, -588, -587, -581, -578, -577, -576, -575, -574, -573, -568, -566, -565, -563, -562, -560, -558, -556, -554, -553, -550, -548, -546, -544, -543, -542, -540, -539, -537, -535, -533, -530, -529, -528, -527, -522, -520, -519, -515, -510, -505, -504, -503, -499, -496, -490, -489, -487, -485, -482, -481, -478, -474, -473, -472, -470, -469, -468, -467, -466, -465, -463, -462, -461, -459, -458, -456, -452, -451, -450, -449, -448, -446, -445, -443, -442, -439, -438, -437, -433, -432, -430, -424, -423, -417, -412, -411, -407, -403, -400, -398, -396, -395, -393, -391, -388, -387, -384, -383, -382, -381, -379, -375, -374, -373, -370, -369, -367, -366, -365, -364, -362, -361, -360, -358, -355, -354, -348, -347, -346, -345, -344, -343, -338, -337, -335, -333, -332, -326, -325, -324, -323, -322, -321, -320, -319, -316, -315, -314, -312, -311, -310, -309, -307, -303, -302, -300, -299, -297, -294, -289, -288, -287, -283, -281, -280, -278, -275, -274, -273, -272, -271, -264, -263, -261, -260, -259, -258, -255, -254, -253, -250, -246, -245, -243, -241, -237, -234, -232, -231, -227, -226, -223, -220, -214, -213, -212, -211, -210, -209, -205, -202, -200, -199, -197, -195, -193, -191, -189, -188, -187, -186, -182, -181, -179, -175, -172, -170, -169, -168, -166, -164, -161, -160, -153, -148, -147, -144, -141, -137, -136, -132, -131, -130, -129, -127, -126, -120, -119, -118, -116, -114, -113, -112, -109, -104, -103, -100, -97, -96, -95, -93, -92, -91, -88, -85, -83, -81, -76, -72, -71, -68, -67, -65, -63, -60, -58, -56, -55, -53, -52, -51, -47, -44, -43, -42, -41, -40, -36, -35, -30, -25, -23, -22, -21, -20, -19, -17, -13, -12, -10, -9, -8, -7, -3, -1, 0, 1, 9, 12, 13, 14, 18, 21, 22, 23, 24, 25, 29, 30, 31, 33, 34, 37, 38, 39, 41, 42, 44, 47, 49, 50, 52, 53, 54, 57, 58, 60, 61, 63, 64, 66, 68, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 95, 98, 99, 102, 105, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 131, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 150, 151, 152, 157, 158, 161, 163, 166, 167, 168, 171, 173, 174, 176, 177, 178, 180, 182, 183, 184, 187, 188, 189, 191, 192, 193, 197, 198, 199, 201, 204, 208, 212, 213, 218, 219, 220, 222, 226, 227, 228, 229, 231, 234, 236, 237, 238, 239, 240, 242, 244, 245, 248, 251, 252, 255, 258, 259, 261, 264, 265, 266, 270, 272, 273, 274, 275, 279, 282, 283, 284, 285, 286, 287, 289, 291, 294, 296, 298, 301, 309, 311, 313, 314, 318, 320, 322, 323, 324, 328, 330, 331, 334, 337, 342, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 359, 360, 366, 369, 370, 373, 374, 376, 378, 379, 381, 382, 383, 386, 393, 396, 401, 403, 404, 405, 408, 410, 414, 415, 420, 421, 422, 424, 429, 432, 433, 436, 437, 438, 440, 441, 442, 444, 447, 451, 452, 453, 455, 458, 460, 461, 462, 464, 465, 467, 468, 470, 471, 472, 474, 476, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 499, 500, 502, 505, 509, 510, 511, 516, 518, 519, 522, 523, 524, 525, 526, 527, 529, 534, 536, 539, 545, 546, 547, 549, 551, 553, 554, 555, 556, 559, 564, 565, 566, 567, 568, 569, 572, 574, 575, 576, 578, 580, 584, 587, 591, 592, 594, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 614, 616, 619, 621, 622, 624, 626, 628, 629, 630, 631, 632, 633, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 657, 659, 660, 661, 662, 669, 671, 672, 673, 674, 676, 679, 680, 682, 683, 685, 690, 692, 700, 702, 703, 705, 706, 707, 712, 714, 716, 719, 720, 721, 722, 724, 728, 732, 733, 735, 736, 737, 738, 740, 743, 744, 745, 746, 747, 749, 751, 754, 758, 760, 762, 768, 770, 772, 773, 774, 775, 776, 777, 782, 787, 790, 792, 796, 797, 799, 801, 802, 803, 804, 805, 808, 814, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 830, 834, 836, 839, 840, 841, 842, 844, 845, 846, 849, 852, 853, 854, 855, 857, 860, 862, 863, 864, 865, 866, 867, 869, 870, 873, 875, 876, 877, 880, 882, 883, 886, 887, 888, 892, 896, 897, 899, 905, 908, 909, 911, 913, 914, 916, 918, 919, 922, 923, 926, 930, 936, 939, 940, 943, 945, 948, 949, 953, 954, 955, 957, 958, 963, 965, 966, 969, 974, 975, 976, 978, 979, 981, 986, 988, 989, 992, 993, 995}, 212));
    }

    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int x = left + (right - left) / 2;
            int m = nums[x];
            if (m == target) {
                return x;
            } else if (m > target) {
                right = right == x ? right - 1 : x;
            } else {
                left = left == x ? left + 1 : x;
            }
        }
        return -1;
    }
}
